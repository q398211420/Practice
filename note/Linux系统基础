1.文件描述符fd（File Descriptor） 是一个用于表示打开文件、套接字、管道或设备等资源的整数。在Linux中，所有执行I/O操作的系统调用都通过文件描述符来完成。

文件描述符的主要用途是允许程序对文件进行各种操作，如读写、关闭等。在程序刚启动的时候，默认有三个文件描述符，分别是：

0：标准输入（stdin）
1：标准输出（stdout）
2：标准错误（stderr）
这些文件描述符都是预定义的，可以直接使用。

在Linux系统中，文件描述符是一个非负整数，用于指代被打开的文件。所有执行I/O操作的系统调用都通过文件描述符来完成。
程序刚刚启动的时候，默认有三个文件描述符，分别是0（代表标准输入），1（代表标准输出），2（代表标准错误）。如果此时去打开一个新的文件，它的文件描述符会是3。

传统的fork()系统调用直接把所有的资源复制给新创建的进程。这种实现过于简单并且效率低下，因为它拷贝的数据也许并不共享，更糟的情况是，如果新进程打算立即执行一个新的映像，那么所有的拷贝都将前功尽弃。Linux的fork()使用写时拷贝(copy-on-write)页实现。

2.写时拷贝
一种可以推迟甚至免除拷贝数据的技术。内核此时并不复制整个进程地址空间，而是让父进程和子进程共享同一个拷贝。只有在需要写入的时候，数据才会被复制，从而使各个进程拥有各自的拷贝。
也就是说，资源的复制只有在需要写入的时候才进行，在此之前，只是以只读方式共享。这种技术使地址空间上的页的拷贝被推迟到实际发生写入的时候。
在页根本不会被写入的情况下——举例来说，fork()后立即调用exec()—-它们就无需复制了。fork()的实际开销就是复制父进程的页表以及给子进程创建惟一的进程描述符。
在一般情况下，进程创建后都会马上运行一个可执行的文件，这种优化可以避免拷贝大量根本就不会被使用的数据（地址空间里常常包含数十兆的数据)。由于Unix强调进程快速执行的能力，所以这个优化是很重要的。 

3.使用signal信号捕捉方法忽略递达SIGCHLD信号，这常用于并发服务器的性能的一个技巧，因为并发服务器常常fork很多子进程，子进程终结之后需要服务器进程去wait清理资源。
如果将此信号的处理方式设为忽略，可以内核把僵尸子进程转交给init进程去处理，省去了大量僵尸进程占用系统资源。
  