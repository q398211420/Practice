1.创建动态库:
g++ -fPIC -shared -o libexample.so example.cpp

2.链接动态库：
g++ -L/path/to/library -lmath -o program program.cpp
可以看到，能成编译通过，但是运行报错，报错的内容为：找不到动态库。
这是因为动态库不会和程序一起编译，上述编译编译的命令只是告诉了编译器在编译时能够找到动态库，但是当实际程序运行时，却搜索不到需要使用的动态库，因此程序报错。
程序运行时，动态库的查找和内存加载操作是由 动态链接器 来完成的。
动态链接器搜索动态的路径为 /lib 或 /usr/lib，因此解决办法之一就是将动态库拷贝到 /lib 或 usr/lib 目录下，然后就可以在运行时成功加载了。  

3.创建静态库：
g++ -c example.cpp
ar rcs libexample.a example.o

r (replace)

作用：将指定的文件添加到库中。如果库中已经存在同名的目标文件，则会替换掉原有文件。
使用场景：在更新库文件时，使用这个选项可以确保新的目标文件替换旧的。

c (create)
作用：如果库文件不存在，则创建一个新的库文件。
使用场景：这个选项常用于创建新库时，确保库文件的存在。

s (index)
作用：创建库文件的索引，以加快链接时的查找速度。
使用场景：对于较大的静态库，添加索引能够显著提高链接速度。链接器可以更快地找到库中所需的目标文件。

4.链接静态库
g++ -L/path/to/library -lmath -o program program.cpp


CMake命令：
    生成动态库：
        add_library(MyDynamicLibrary SHARED ${SOURCES})
    生成静态库动态库：
        add_library(MyStaticLibrary STATIC ${SOURCES})

    # 设置动态库的输出目录
    set_target_properties(MyDynamicLibrary PROPERTIES
        OUTPUT_NAME "mylib"
        LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
    )

    # 设置静态库的输出目录
    set_target_properties(MyStaticLibrary PROPERTIES
        OUTPUT_NAME "mylib"
        ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
    )

    1. MyStaticLibrary
    含义：这是你在之前使用 add_library 创建的目标名称。在这个例子中，它是你要设置属性的静态库的名称。

    2. PROPERTIES
    含义：表示后面将设置的内容是目标的属性。这是 set_target_properties 命令的一个关键字，指明你接下来的设置是关于目标的属性。

    3. OUTPUT_NAME "mylib"
    含义：设置生成的库文件的名称。
    默认情况下，静态库会以 lib 前缀和目标名称组合成文件名。例如，如果目标名称是 MyStaticLibrary，默认情况下生成的文件会是 libMyStaticLibrary.a。
    使用 OUTPUT_NAME "mylib" 将生成的静态库文件名更改为 libmylib.a。可以省略 lib 前缀，CMake 会自动添加。

    4. ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
    含义：设置生成的静态库文件的输出目录。
    ARCHIVE_OUTPUT_DIRECTORY 是一个特定于静态库的属性，用于指定静态库文件的位置。
    ${CMAKE_BINARY_DIR} 是 CMake 提供的一个变量，表示构建目录的路径。通过 CMAKE_BINARY_DIR，可以方便地管理生成的文件。
    "/lib" 是在构建目录下的一个子目录，意味着静态库将被放置在 build/lib 目录中。

    target_link_libraries(my_target PRIVATE some_library)区别：
        1. PRIVATE
            含义：只对当前目标可见。
            作用：如果你将一个库或目录标记为 PRIVATE，那么该库或目录只对当前目标（例如一个可执行文件或库）可见，不会传递给依赖于这个目标的其他目标。
            使用场景：当你需要某个库或目录仅用于实现当前目标，而不想让使用当前目标的其他目标看到这个库时，可以使用 PRIVATE。

        2. PUBLIC
            含义：对当前目标和依赖于该目标的其他目标可见。
            作用：如果你将一个库或目录标记为 PUBLIC，那么该库或目录对当前目标和所有依赖于该目标的目标可见。
            使用场景：当你希望一个库或目录不仅用于当前目标，还希望其他依赖于该目标的目标能够使用它时，可以使用 PUBLIC。

        3. INTERFACE
            含义：只对依赖于该目标的其他目标可见，当前目标本身不会使用它。
            作用：INTERFACE 是一种特殊的类型，意味着这个库或目录不会被当前目标链接，但依赖于该目标的其他目标可以使用这个库或目录。
            使用场景：当你定义一个接口库（interface library），它只包含接口而不包含任何实现时，可以使用 INTERFACE。这通常用于头文件库或模板库。